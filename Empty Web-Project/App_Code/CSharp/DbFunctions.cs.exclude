using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using System.IO;
using System.Text;
 


/// <summary>
/// Summary description for DbFunctions
/// </summary>
public class DbFunctions : genUtility
{
    DbConnection objCon;
   
    SqlCommand com;
    SqlDataAdapter da;
    public SqlDataReader dr;
    DataSet ds;
	public DbFunctions()
	{
       
            objCon = new DbConnection();
        
	}

    public string ValidateUserLogin(string sql)
    {
        com = new SqlCommand(sql, objCon.con);
        com.Connection.Open();
        string UserName = com.ExecuteScalar().ToString();
        com.Connection.Close();
        return UserName;
    }
    public void controlButton(Button cmdI, Button cmdU,string perm)
    {
        char[] separator = new char[] { '|' };
        string[] arr = perm.Split(separator);
        if (cmdI.Text.ToLower() != "update")
        {
            cmdI.Enabled = (arr[0].ToString() == "1" ? true : false);
        }
        else
        {
            cmdI.Enabled = (arr[1].ToString() == "1" ? true : false);
        }
        //cmdD.Enabled = (arr[2].ToString() == "1" ? true : false);
        arr = null;
    }


    public void controlPerm(Button cmdI, Button cmdU, Button cmdD, string perm)
    {
        char[] separator = new char[] { '|' };
        string[] arr = perm.Split(separator);
        if (cmdI.Text.ToLower() != "update")
        {
            cmdI.Enabled = (arr[0].ToString() == "1" ? true : false);
        }
        else
        {
            cmdI.Enabled = (arr[1].ToString() == "1" ? true : false);
        }
        cmdD.Enabled = (arr[2].ToString() == "1" ? true : false);
        arr = null;
    }

    public string viewAllow(string uid)
    {
        string retView = "";
        string sqlstr = "select deptID,CourseID,yearsemID,subjectID,topicID,subtopicID from Assignrolechild where assignroleid='" + uid + "'"; //(select id from Assignroles where individualid='" + uid + "')";
        com = new SqlCommand(sqlstr, objCon.con);
        com.Connection.Open();
        SqlDataReader sdr = null;
        sdr = com.ExecuteReader();

        if (sdr.HasRows)
        {
            sdr.Read();
            retView = sdr[0].ToString() + "|" + sdr[1].ToString() + "|" + sdr[2].ToString() + "|" + sdr[3].ToString() + "|" + sdr[4].ToString() + "|" + sdr[5].ToString();
            
        }
        //colValue = com.ExecuteScalar();
        com.Connection.Close();
        return retView;
    }

    public object FetchScalar(string sql)
    {
        object colValue = "";
        com = new SqlCommand(sql, objCon.con);
        com.Connection.Open();
        colValue = com.ExecuteScalar();
        com.Connection.Close();
        return colValue;
    }
    public void FetchRecordsByTable(DataTable dTable,string sql)
    {
        da = new SqlDataAdapter(sql, objCon.con);
        da.Fill(dTable);
    }

    public SqlDataReader FetchRecordsByDataReader(SqlDataReader dr, string sql)
    {
        com = new SqlCommand(sql, objCon.con);
        com.Connection.Open();
        dr = com.ExecuteReader();
        return dr;
    }

    public void CloseConnection()
    {
        com.Connection.Close();
    }
    public SqlDataReader FetchRecordsByDataReader(string sql)
    {
        com = new SqlCommand(sql, objCon.con);
        com.Connection.Open();
        dr = com.ExecuteReader();
        return dr;
    }

    public void CloseConnections()
    {
        dr.Close();
        com.Connection.Close();
    }
    public int ExecuteDML(string sql)
    {
        int rowInserted = 0;
        com = new SqlCommand(sql, objCon.con);
        com.Connection.Open();
        rowInserted = com.ExecuteNonQuery();
        com.Connection.Close();
        return rowInserted;
    }
    public void FillGridVIew(DataGrid grd, string sql)
    {
        com = new SqlCommand(sql, objCon.con);
        com.Connection.Open();
        dr = com.ExecuteReader();
        if (dr.HasRows)
        {
            grd.DataSource = dr;
            grd.DataBind();
        }
        else
        {
            DataTable dt = new DataTable();
            grd.DataSource = dt;
            grd.DataBind();
            dt.Dispose();
        }
        com.Connection.Close();
    }
    public void FillGridView(GridView grd, string sql)
    {
        da = new SqlDataAdapter(sql, objCon.con);
        DataSet ds = new DataSet();
        da.Fill(ds);


        if (ds.Tables[0].Rows.Count > 0)
        {
            grd.DataSource = ds;
            grd.DataBind();
        }
        //else
        //{

        //    ds.Tables[0].Rows.Add(ds.Tables[0].NewRow());
        //    grd.DataSource = ds;
        //    grd.DataBind();

        //    int columnCount = grd.Columns.Count;
        //    grd.Columns.Clear();

        //    //grd.Rows[0].Cells[0].MergeStyle();
        //    grd.Rows[0].Cells[0].ColumnSpan = columnCount;
        //    grd.Rows[0].Cells[0].Text = "No Records Found";

        //    //dg.Items[0].Cells[0].CssClass = "TextField"; 
        //    grd.Rows[0].Cells[0].BackColor = System.Drawing.Color.WhiteSmoke;
        //}
    }

    public Int16 GetRowCount(string sql)
    {
        Int16 rowCount = 0;
        com = new SqlCommand(sql, objCon.con);
        com.Connection.Open();
        object objVal = com.ExecuteScalar();
        //Session["test"] = objVal;
        if (objVal.ToString().Trim().Equals("NULL"))
            rowCount = 0;
        else
            rowCount = Convert.ToInt16(objVal);
        com.Connection.Close();
        return rowCount;
    }

    public void FillDropdownlist(DropDownList ddl, string TextFieldName, string ValueFieldName, string sql, string ZeroIndexVal)
    {
        ddl.Items.Clear();
        com = new SqlCommand(sql, objCon.con);
        com.Connection.Open();
        dr = com.ExecuteReader();

        if (dr.HasRows)
        {
            ddl.DataSource = dr;
            ddl.DataTextField = TextFieldName;
            ddl.DataValueField = ValueFieldName;
            ddl.DataBind();
            if (ZeroIndexVal != "")
            {
                ddl.Items.Insert (0,ZeroIndexVal);
                ddl.Items[0].Value = "0";
            }
        }
        else
        {
            ddl.DataSource = dr;
            ddl.DataBind();
            if (ZeroIndexVal != "")
            {
                ddl.Items.Insert(0, ZeroIndexVal);
                ddl.Items[0].Value = "0";
            }
        }
        
        com.Connection.Close();
    }

    public void FillListBox(ListBox ddl, string TextFieldName, string ValueFieldName, string sql, string ZeroIndexVal)
    {
        ddl.Items.Clear();
        com = new SqlCommand(sql, objCon.con);
        com.Connection.Open();
        dr = com.ExecuteReader();

        if (dr.HasRows)
        {
            ddl.DataSource = dr;
            ddl.DataTextField = TextFieldName;
            ddl.DataValueField = ValueFieldName;
            ddl.DataBind();
            if (ZeroIndexVal != "")
            {
                ddl.Items.Insert(0, ZeroIndexVal);
                ddl.Items[0].Value = "0";
            }
        }
        else
        {
            ddl.DataSource = dr;
            ddl.DataBind();
            if (ZeroIndexVal != "")
            {
                ddl.Items.Insert(0, ZeroIndexVal);
                ddl.Items[0].Value = "0";
            }
        }

        com.Connection.Close();
    }

    public void FillCheckboxlist(CheckBoxList  chk, string TextFieldName, string ValueFieldName, string sql)
    {
        chk.Items.Clear();
        com = new SqlCommand(sql, objCon.con);
        com.Connection.Open();
        dr = com.ExecuteReader();

        if (dr.HasRows)
        {
            chk.DataSource = dr;
            chk.DataTextField = TextFieldName;
            chk.DataValueField = ValueFieldName;
            chk.DataBind();
           
        }
       com.Connection.Close();
    }
    public void FillRadiolist(RadioButtonList  chk, string TextFieldName, string ValueFieldName, string sql)
    {
        chk.Items.Clear();
        com = new SqlCommand(sql, objCon.con);
        com.Connection.Open();
        dr = com.ExecuteReader();

        if (dr.HasRows)
        {
            chk.DataSource = dr;
            chk.DataTextField = TextFieldName;
            chk.DataValueField = ValueFieldName;
            chk.DataBind();

        }
        com.Connection.Close();
    }
    public void FillGridVIew( GridView  grd,  string sql)
    {
        da = new SqlDataAdapter(sql, objCon.con);
        DataSet ds = new DataSet();
        da.Fill(ds);

        if (ds.Tables[0].Rows.Count > 0)
        {
            grd.DataSource = ds.Tables[0];
            grd.DataBind();
        }
        else
        {
            DataTable dt = new DataTable();
            grd.DataSource = dt;
            grd.DataBind();
            dt.Dispose();
        }
    }
    public void FillGridVIew1(GridView grd, string sql)
    {
        da = new SqlDataAdapter(sql, objCon.con);
        DataSet ds = new DataSet();
        da.Fill(ds);
        
        if (ds.Tables[0].Rows.Count>0)
        {
            grd.DataSource = ds.Tables[0];
            grd.DataBind();
        }
        else
        {
            DataTable dt = new DataTable();
            grd.DataSource = dt;
            grd.DataBind();
            dt.Dispose();
        }
    }
    public void FillGrid(DataGrid dg, string sql)
    {
        da = new SqlDataAdapter(sql, objCon.con);
        DataSet ds = new DataSet();
        da.Fill(ds);

        if (ds.Tables[0].Rows.Count > 0)
        {
            dg.DataSource = ds;
            dg.DataBind();
        }
        else
        {
            ds.Tables[0].Rows.Add(ds.Tables[0].NewRow());
            dg.DataSource = ds;
            dg.DataBind();

            int columnCount = dg.Items[0].Cells.Count;
            dg.Items[0].Cells.Clear();

            dg.Items[0].Cells.Add(new TableCell());
            dg.Items[0].Cells[0].ColumnSpan = columnCount;
            dg.Items[0].Cells[0].Text = "No Records Found";

            //dg.Items[0].Cells[0].CssClass = "TextField"; 
            dg.Items[0].Cells[0].BackColor = System.Drawing.Color.WhiteSmoke;
        }
    }
    public DataTable FillDataTable(string sql)
    {
        DataTable dt = new DataTable();
        da = new SqlDataAdapter(sql, objCon.con);
        da.Fill(dt);
        
        return dt;
    }
    //public DataTable FillDataTable1(string sql)
    //{
    //    DataTable dt;// = new DataTable();
    //    da = new SqlDataAdapter(sql, objCon.con);
    //    da.Fill(dt);

    //    return dt;
    //}
    public void FillDataSet(DataSet ds, string sql)
    {
        da = new SqlDataAdapter(sql, objCon.con);
        da.Fill(ds);
    }
    public void FillDataSet1(DataSet ds, string sql)
    {
        SqlDataAdapter daa = new SqlDataAdapter(sql, objCon.con);
        daa.Fill(ds);
        daa.Dispose();
    }
    public string  Get_details( string sql)
    {
        //da = new SqlDataAdapter(sql, objCon.con);
        //DataSet ds = new DataSet();
        //da.Fill(ds);
        SqlDataAdapter ad = new SqlDataAdapter();
        SqlCommand cmd ;
        cmd = new SqlCommand(sql, objCon.con);
        
       
        ad.SelectCommand = cmd;
        DataSet ds = new DataSet();
        try
        {
            //if(ds.Tables[0].Rows.Count>0)
            ad.Fill(ds);
        }
       catch ( Exception ex)
        {

        }

       
        string retval = "";
        if (ds.Tables[0].Rows.Count > 0)
        {
            retval = ds.Tables[0].Rows[0].ItemArray[0].ToString();
        }
        else
        {
            retval = "";
        }
        return retval;
    }
    public string Get_detailsAll(string sql)
    {
        string retval = "";
        SqlDataAdapter ad = new SqlDataAdapter();
        SqlCommand cmd = new SqlCommand(sql, objCon.con);
        ad.SelectCommand = cmd;
        DataSet ds = new DataSet();
        ad.Fill(ds);
        if (ds.Tables[0].Rows.Count > 0)
        {
            for (int i = 0; i <= ds.Tables[0].Rows.Count - 1; i++)
            {
                if (retval == "")
                {
                    retval = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                }
                else
                {
                    retval = retval + "^" + ds.Tables[0].Rows[i].ItemArray[0].ToString();
                }
            }

        }
        //while (reader.Read())
        //{
       

        //}
        //reader.Close();
       return retval;
    }
    public string Get_detailsAllRem_D(string sql)
    {
        string retval = "";
        SqlDataAdapter ad = new SqlDataAdapter();
        SqlCommand cmd = new SqlCommand(sql, objCon.con);
        ad.SelectCommand = cmd;
        DataSet ds = new DataSet();
        ad.Fill(ds);
        if (ds.Tables[0].Rows.Count > 0)
        {
            for (int i = 0; i <= ds.Tables[0].Rows.Count - 1; i++)
            {
                if (retval == "")
                {
                    retval = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                }
                else
                {
                    retval = retval + "^" + ds.Tables[0].Rows[i].ItemArray[0].ToString();
                }
            }

        }
        //while (reader.Read())
        //{


        //}
        //reader.Close();
        return retval;
    }
    public string Get_detailsAll(string sql,string Opr)
    {
        string retval = "";
        SqlDataAdapter ad = new SqlDataAdapter();
        SqlCommand cmd = new SqlCommand(sql, objCon.con);
        ad.SelectCommand = cmd;
        DataSet ds = new DataSet();
        ad.Fill(ds);
        if (ds.Tables[0].Rows.Count > 0)
        {
            for (int i = 0; i <= ds.Tables[0].Rows.Count - 1; i++)
            {
                if (retval == "")
                {
                    retval = ds.Tables[0].Rows[i].ItemArray[0].ToString();
                }
                else
                {
                    retval = retval + Opr.ToString() + ds.Tables[0].Rows[i].ItemArray[0].ToString();
                }
            }

        }
        //while (reader.Read())
        //{


        //}
        //reader.Close();
        return retval;
    }
    public string Get_detailsAllC(string sql, string Opr)
    {
        string retval = "";
        SqlDataAdapter ad = new SqlDataAdapter();
        SqlCommand cmd = new SqlCommand(sql, objCon.con);
        ad.SelectCommand = cmd;
        DataSet ds = new DataSet();
        ad.Fill(ds);
        if (ds.Tables[0].Rows.Count > 0)
        {
            for (int i = 0; i <= ds.Tables[0].Rows.Count - 1; i++)
            {
                if (retval == "")
                {
                    retval = "'" + ds.Tables[0].Rows[i].ItemArray[0].ToString() + "'" ;
                }
                else
                {
                    retval = retval + Opr.ToString() + "'" + ds.Tables[0].Rows[i].ItemArray[0].ToString() + "'" ;
                }
            }

        }
        //while (reader.Read())
        //{


        //}
        //reader.Close();
        return retval;
    }
    public Int32 GenerateID1(string strTablename, string strFldname)
    {
        com = new SqlCommand();
        com.Connection = objCon.con;
        com.Connection.Open();
        
        com.CommandText = "select coalesce(max(" + strFldname + "),'0',max(" + strFldname + ")) from " + strTablename;
        int ID = Convert.ToInt32(com.ExecuteScalar())+1;
        com.Connection.Close();
        
        return ID;
    }
    public string GenerateID(string strTablename, string strFldname)
    {
        com = new SqlCommand();
        com.Connection = objCon.con;
        com.Connection.Open();

        com.CommandText = "select coalesce(max(" + strFldname + "),'0',max(" + strFldname + ")) from " + strTablename;
        int ID = Convert.ToInt32(com.ExecuteScalar()) + 1;
        com.Connection.Close();
        string strID = string.Empty;
        if (ID < 10)
        {
            strID = "0" + ID.ToString();
        }
        else
        {
            strID = ID.ToString();
        }
        return strID;
    }
    public string GenerateIDByCodition(string strTablename, string strFldname,string InstId)
    {
        com = new SqlCommand();
        com.Connection = objCon.con;
        com.Connection.Open();

        com.CommandText = "select coalesce(max(" + strFldname + "),'0',max(" + strFldname + ")) from " + strTablename + " where InstituteID=" +InstId ;
        int ID = Convert.ToInt32(com.ExecuteScalar()) + 1;
        com.Connection.Close();
        string strID = string.Empty;
        if (ID < 10)
        {
            strID = "0" + ID.ToString();
        }
        else
        {
            strID = ID.ToString();
        }
        return strID;
    }
    public void MsgBox(string msg, Page refP)
    {
        Label lbl = new Label();
        string lb = "window.alert('" + msg + "')";
        ScriptManager.RegisterClientScriptBlock(refP, GetType(), "UniqueKey", lb, true);
        //ScriptManager.RegisterClientScriptBlock(refP, refP.GetType, "UniqueKey", lb, True)
        refP.Controls.Add(lbl);
    }
    public void MsgBox1(string msg, UpdatePanel refP)
    {
        string lb = "window.alert('" + msg + "');";
        ScriptManager.RegisterClientScriptBlock(refP, GetType(), "UniqueKey", lb, true);
       
       
    }

    public void FillDataSet(DataTable dataTable, string p)
    {
        throw new NotImplementedException();
    }


    public void Gen_Id(string src,string inst_id,ref string  Res,ref int cp)
    {
       
        try
        {
            com = new SqlCommand();
            com.Connection = objCon.con;
            com.Connection.Open();
            

            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "sp_Hsp_Gen_ID";
            com.Parameters.AddWithValue("@Source", src);
            com.Parameters.AddWithValue("@instid", Int32.Parse(inst_id));


            com.Parameters.Add("@Res", SqlDbType.NVarChar, 100).Direction = ParameterDirection.Output;
            com.Parameters.Add("@Cp", DbType.Int32).Direction = ParameterDirection.Output;

            com.ExecuteNonQuery();

            Res = com.Parameters["@Res"].Value.ToString();

            cp = Int32.Parse(com.Parameters["@Cp"].Value.ToString());


            com.Parameters.Clear();
        }
        catch { }
        finally
        {
            com.Connection.Close(); 
        }
       // return Result;
    }
    public String GetListBoxSelectedItem(ListBox LSTBox)
    {
        StringBuilder RepeatedShift = new StringBuilder();
        String Value = string.Empty;
        for (int i = 0; i < LSTBox.Items.Count; i++)
        {
            if (LSTBox.Items[i].Selected == true)
            {
                RepeatedShift.Append(LSTBox.Items[i].Value + ",");
            }
        }
        if (RepeatedShift.ToString() != string.Empty)
            Value = RepeatedShift.ToString().Remove(RepeatedShift.ToString().LastIndexOf(',')).ToString();

        return Value;
        //return RepeatedShift.ToString().Remove(RepeatedShift.ToString().LastIndexOf(','));
    }
    //public string SelectInsideTrans(string str)
    //{
    //    string retstr = "";
    //    SqlDataAdapter adapter = new SqlDataAdapter();
    //    SqlCommand command = new SqlCommand(str, objCon.con);
    //    adapter.SelectCommand = command;
    //    DataSet ds = new DataSet();
    //    adapter.Fill(ds);
    //    if (ds.Tables[0].Rows.Count > 0)
    //    {
    //        retstr = ds.Tables[0].Rows[0].ItemArray[0].ToString();
    //    }
    //    else
    //    {
    //        retstr = "1";
    //    }
    //    return retstr;
    //}

    public void ResetControlValues(Control parent)
    {

        foreach (Control c in parent.Controls)
        {
            if (c.Controls.Count > 0)
            {
                ResetControlValues(c);
            }
            else
            {
                switch (c.GetType().ToString())
                {
                    case "System.Web.UI.WebControls.TextBox":
                        ((TextBox)c).Text = "";
                        break;
                    case "System.Web.UI.WebControls.DropDownList":
                        ((DropDownList)c).ClearSelection();
                        break;
                    //case "System.Web.UI.WebControls.GridView":                        
                    //for (int i = 0; i < ((GridView)c).Rows.Count; i++)
                    //{
                    //    ((GridView)c).DeleteRow(i);
                    //}
                    // break;
                    //case "System.Web.UI.WebControls.RadioButton":
                    //    ((RadioButton)c).Checked = false;
                    //    break;

                }
            }
        }
    }
 
}
